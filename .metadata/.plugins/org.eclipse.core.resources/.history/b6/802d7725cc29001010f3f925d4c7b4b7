package controllers;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import dtos.creations.PatientCreationDTO;
import dtos.responses.PatientResponseDTO;
import dtos.updates.forms.PatientUpdateFormDTO;
import jakarta.validation.Valid;
import services.PatientService;

@RestController
@RequestMapping("/patients")
public class PatientController {
	private final PatientService patientService;
	
	public PatientController(PatientService patientService) {
		this.patientService = patientService;
	}
	@PostMapping
	@PreAuthorize("hasAnyRole('PATIENT','ADM')")
	public ResponseEntity<PatientResponseDTO> createPatient(@RequestBody @Valid PatientCreationDTO patientDTO){
		PatientResponseDTO patientResponse = patientService.createPatient(patientDTO);
		return ResponseEntity.status(HttpStatus.CREATED).body(patientResponse);
	}

	@GetMapping("/{id}")
	@PreAuthorize("hasAnyRole('PATIENT','ADM','DOCTOR','NURSE')")
	public ResponseEntity<PatientResponseDTO> getPatient(@PathVariable("id") Long id){
		var response = patientService.getPatient(id);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@GetMapping("/{id}/form")
	@PreAuthorize("hasAnyRole('PATIENT','ADM','DOCTOR','NURSE')")
	public ResponseEntity<PatientUpdateFormDTO> getPatientUpdateInformation(@PathVariable Long id){
		var response = patientService.getUpdateFormFromPatient(id);
		return ResponseEntity.status(HttpStatus.OK).body(response);
	}
	
	@PutMapping("/{id}")
	@PreAuthorize("hasAnyRole('PATIENT','ADM','DOCTOR','NURSE')")
	public ResponseEntity<PatientResponseDTO> updatePatient(@PathVariable("id") Long patientId, @RequestBody @Valid PatientCreationDTO patientDTO){
		patientService.updatePatient(patientId, patientDTO);
		PatientResponseDTO updateResponse = patientService.getPatient(patientId);
		return ResponseEntity.ok(updateResponse);
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deletePatient(@PathVariable("id") Long patientId){
		patientService.deletePatient(patientId);
		return ResponseEntity.noContent().build();
	}
}
