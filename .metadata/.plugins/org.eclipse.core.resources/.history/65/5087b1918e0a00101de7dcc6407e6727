package model.entities;

import java.time.LocalDate;

import java.util.Collections;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
@Entity
@Table(name= "medical_exams")
public class MedicalExam {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@Column(name = "physical_exam")
	private String physicalExam;
	@ElementCollection
	@CollectionTable(name = "complementary_exams", joinColumns = @JoinColumn(name = "medical_exam_id"))
	private Set<String> complementaryExams = new HashSet<>();
	@OneToOne(mappedBy = "medicalExam")
	private MedicalRecord medicalRecord;
	@Column(name = "exams_date", nullable = false)
	private LocalDate examsDate;
	@Column(nullable = false)
	private String methods; // The methods used to get the result for the exams
	@ElementCollection
	@CollectionTable(name="exam_measures_results", joinColumns = @JoinColumn(name = "medical_exam_id"))
	private Set<String> examMeasuresResult = new HashSet<>(); // Details of any measure taken in the exams (example: pressure, blood glucose level)
	@Column(name= "doctor_observations")
	private String doctorObservations; // Comments from the doctor about the exams
	
	protected MedicalExam() {}
	
	public MedicalExam(String physicalExam, Set<String> complementaryExams, MedicalRecord medicalRecord,
			LocalDate examsDate, String methods, Set<String> examMeasuresResult, String doctorObservations) {
		this.physicalExam = physicalExam;
		this.complementaryExams = (complementaryExams != null) ? new HashSet<>(complementaryExams) : new HashSet<>();
		this.medicalRecord = medicalRecord;
		this.examsDate = examsDate;
		this.methods = methods;
		this.examMeasuresResult = examMeasuresResult;
		this.doctorObservations = doctorObservations;
	}

	public Long getId() {
		return id;
	}

	public String getPhysicalExam() {
		return physicalExam;
	}

	public void setPhysicalExam(String physicalExam) {
		this.physicalExam = physicalExam;
	}

	public Set<String> getComplementaryExams() {
		return Set.copyOf(complementaryExams);
	}

	public void setComplementaryExams(Set<String> complementaryExams) {
		this.complementaryExams = (complementaryExams != null) ? complementaryExams: new HashSet<>();
	}

	public MedicalRecord getMedicalRecord() {
		return medicalRecord;
	}

	public void setMedicalRecord(MedicalRecord medicalRecord) {
		this.medicalRecord = medicalRecord;
	}

	public LocalDate getExamsDate() {
		return examsDate;
	}

	public void setExamsDate(LocalDate examsDate) {
		this.examsDate = examsDate;
	}

	public String getMethods() {
		return methods;
	}

	public void setMethods(String methods) {
		this.methods = methods;
	}

	public Set<String> getExamMeasuresResult() {
		return Set.copyOf(examMeasuresResult);
	}

	public void setExamMeasuresResult(Set<String> examMeasuresResult) {
		this.examMeasuresResult = (examMeasuresResult != null) ? examMeasuresResult : new HashSet<>();
	}

	public String getDoctorObservations() {
		return doctorObservations;
	}

	public void setDoctorObservations(String doctorObservations) {
		this.doctorObservations = doctorObservations;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MedicalExam other = (MedicalExam) obj;
		return Objects.equals(id, other.id);
	}
	
	
	
}
