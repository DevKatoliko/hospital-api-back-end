package services;

import java.util.Map;

import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.UserRecord;
import com.google.firebase.auth.UserRecord.UpdateRequest;

import dtos.creations.UserCreationDTO;
import dtos.updates.UserPasswordUpdateDTO;
import mappers.UserConverter;
import model.entities.User;
import model.enums.RoleType;
import repositories.UserRepository;
@Service
public class UserService {
	
	private final UserRepository userRepository;
	
	public UserService(UserRepository userRepository) {
		this.userRepository = userRepository;
	}
	
	private void registerUser(UserCreationDTO userDTO, RoleType role) throws FirebaseAuthException{
		if (role == RoleType.ADM && !isCurrentUserAdmin()) {
	        throw new AccessDeniedException("Você não tem permissão para criar um administrador.");
	    }
		
		UserRecord.CreateRequest request = new UserRecord.CreateRequest()
				.setEmail(userDTO.email())
				.setPassword(userDTO.password())
				.setDisplayName(userDTO.userName());
	
		UserRecord userRecord = FirebaseAuth.getInstance().createUser(request);
		String uid = userRecord.getUid();
		
		Map<String, Object> claims = Map.of("role", role);
		FirebaseAuth.getInstance().setCustomUserClaims(uid, claims);
	}


	public User registerUserPatient(UserCreationDTO userDTO) throws FirebaseAuthException {
		registerUser(userDTO, RoleType.PATIENT);
		
		User userPatient = new User(userDTO.email(), userDTO.userName(),userDTO.password(), RoleType.PATIENT);
		 
		return userRepository.save(userPatient);
		
	}
	
	public User registerDoctor (UserCreationDTO userDTO) throws FirebaseAuthException {
		if(!isCurrentUserAdmin())
			throw new AccessDeniedException("Você não tem  permissão para criar um médico!");
		
		registerUser(userDTO, RoleType.DOCTOR);
		
		User userDoctor = UserConverter.fromDTOToEntity(userDTO, RoleType.DOCTOR);
		
		return userRepository.save(userDoctor);
	}
	
	public User registerAdministrator(UserCreationDTO userDTO) throws FirebaseAuthException {
		if(!isCurrentUserAdmin())
			throw new AccessDeniedException("Você não tem  permissão para criar um administrador!");
		
		registerUser(userDTO, RoleType.ADM);

		User userAdministrator = UserConverter.fromDTOToEntity(userDTO, RoleType.ADM);
		
		return userRepository.save(userAdministrator);
	}

	
	public void changePassword(UserPasswordUpdateDTO newPassword) throws FirebaseAuthException {
		String validatedUid = SecurityContextHolder.getContext().getAuthentication().getName();
		UpdateRequest request = new UpdateRequest(validatedUid).setPassword(newPassword.newPassword());
		UserRecord userRecord = FirebaseAuth.getInstance().updateUser(request);
		System.out.println("Senha de usuário: " + userRecord.getUid() +" foi atualizada!");
		
	}
	
	private boolean isCurrentUserAdmin() {
	    var authentication = SecurityContextHolder.getContext().getAuthentication();

	    return authentication != null &&
	    		authentication.isAuthenticated() &&
	    		authentication.getAuthorities().stream()
	            .anyMatch(auth -> auth.getAuthority().equals("ROLE_ADM"));
	}

	

}
