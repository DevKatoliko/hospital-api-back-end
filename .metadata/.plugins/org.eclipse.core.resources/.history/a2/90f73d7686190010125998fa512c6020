package userTests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.UserRecord;

import dtos.creations.UserCreationDTO;
import model.entities.User;
import repositories.UserRepository;
import services.UserService;

@ExtendWith(MockitoExtension.class)
public class UserServiceTest {
	@Mock
	private UserRepository userRepository;
	
	@InjectMocks
	private UserService userService;
	
	@Mock
	private FirebaseAuth firebaseAuth;
	
	
	private UserCreationDTO userDTO;
	

	@BeforeEach
	void setUp() throws FirebaseAuthException{
		userDTO = new UserCreationDTO("mockUser","useremail@gmail.com","password123");
	
		
		UserRecord.CreateRequest request = new UserRecord.CreateRequest()
				.setEmail(userDTO.email())
				.setPassword(userDTO.password())
				.setDisplayName(userDTO.userName());
		
		when(firebaseAuth.createUser(any())).thenReturn(FirebaseAuth.getInstance().createUser(request));
		
	
				
		}
	
	@Test
	void createPatient() throws FirebaseAuthException {
		User userPatient = userService.registerUserPatient(userDTO);
		
		assertEquals("mockUser", userPatient.getLogin());
		assertEquals("useremail@gmail.com", userPatient.getEmail());
		assertEquals("PATIENT", userPatient.getRole());
	}
	
}
