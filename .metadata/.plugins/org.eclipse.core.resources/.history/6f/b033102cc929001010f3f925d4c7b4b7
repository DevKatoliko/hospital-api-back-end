package auditing;

import java.lang.reflect.Method;
import java.util.Map;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import annotations.audit.LogAudit;
import jakarta.servlet.http.HttpServletRequest;
import services.AuditLoggerService;

@Aspect
@Component
public class AuditAspect {
	
	@Autowired
	private AuditLoggerService auditLogger;
	
	@SuppressWarnings("unused")
	@Autowired
	private HttpServletRequest request;
	
	@Before("@annotation(annotations.audit.LogAudit))")
	public void loggerMethodExecution(JoinPoint joinPoint) {
		var auth = SecurityContextHolder.getContext().getAuthentication();
		if(auth == null || !auth.isAuthenticated()) return;
		String uid = auth.getName();
		String email = ((Map<String,String>)auth.getDetails()).get("email");
		
		/*Taking the annotation action*/
		MethodSignature signature = (MethodSignature)joinPoint.getSignature();
		Method method = signature.getMethod();
		LogAudit annotation = method.getAnnotation(LogAudit.class);
		String action = annotation.action();
		
		/*Trying to take the resource id*/
		Object[] args = joinPoint.getArgs();
		String resourceId = args != null ? args[0].toString() : "N/A";
		
		auditLogger.log(action, uid, email, resourceId);
	}
}
