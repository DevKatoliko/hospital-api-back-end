package controllers;

import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.firebase.auth.FirebaseAuthException;

import dtos.creations.UserCreationDTO;
import dtos.responses.UserResponseDTO;
import dtos.updates.UserPasswordUpdateDTO;
import jakarta.validation.Valid;
import model.entities.User;
import services.UserService;

@RestController
@RequestMapping("/auth")
public class UserController {
	private final UserService userService;
	
	public UserController(UserService userService) {
		this.userService = userService;
	}
	
	private ResponseEntity<UserResponseDTO> userCreationResponseEntityBuilder(User user){
		var resDTO = UserResponseDTO.fromUser(user);
		return ResponseEntity.status(HttpStatus.CREATED).body(resDTO);
	}
	
	@PostMapping("/register/patient")
	public ResponseEntity<UserResponseDTO> registerUserPatient (@RequestBody @Valid UserCreationDTO userDTO) throws FirebaseAuthException{
		User userPatient = userService.registerUserPatient(userDTO);
		return userCreationResponseEntityBuilder(userPatient);
	}
	
	@PreAuthorize("hasAnyRole('ADM','DOCTOR')")
	@PostMapping("/register/doctor")
	public ResponseEntity<UserResponseDTO> registerUserDoctor(@RequestBody @Valid UserCreationDTO userDTO) throws FirebaseAuthException{
		User userDoctor = userService.registerDoctor(userDTO);
		return userCreationResponseEntityBuilder(userDoctor);
	}
	@PreAuthorize("hasRole(ADM)")
	@PostMapping("/register/adm")
	public ResponseEntity<UserResponseDTO> registerUserAdministrator(@RequestBody @Valid UserCreationDTO userDTO)throws FirebaseAuthException{
		User user = userService.registerAdministrator(userDTO);
		return userCreationResponseEntityBuilder(user);
	}
	
	@PreAuthorize("isAuthenticated()")
	@PostMapping("/change-password")
	public ResponseEntity<String> changePassword(@RequestBody @Valid UserPasswordUpdateDTO newPassword, Long userId){
		try {
			userService.changePassword(newPassword);
			return ResponseEntity.status(HttpStatus.OK).body("Senha atualizada com sucesso");
		}catch(FirebaseAuthException e) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Erro ao atualizar senha!");
		}
	}

	public ResponseEntity<String> deleteUser(){
		try {
			userService.deleteCurrentUser();
			return ResponseEntity.status(HttpStatus.OK).body("Usuário deletado com sucesso!");
		}catch(FirebaseAuthException e){
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuário não encontrado!");
		}
	}
}
