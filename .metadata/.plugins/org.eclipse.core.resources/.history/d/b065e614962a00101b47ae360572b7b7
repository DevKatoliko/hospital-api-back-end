package serviceTests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthException;
import com.google.firebase.auth.UserRecord;

import dtos.creations.UserCreationDTO;
import dtos.responses.UserResponseDTO;
import model.entities.User;
import model.enums.RoleType;
import repositories.UserRepository;
import serviceTests.serviceUtility.TestUtil;
import services.UserService;

@ExtendWith(MockitoExtension.class)
public class UserServiceTest {
	@Mock
	private UserRepository userRepository;
	
	@InjectMocks
	private UserService userService;
	
	@Mock
	private FirebaseAuth firebaseAuth;
	
	private UserCreationDTO userDTO;
	
	private User entityUser;
	private TestUtil util =  new TestUtil();
	
	
	
	@BeforeEach
	void setUp() throws FirebaseAuthException{
		userDTO = new UserCreationDTO("mockUser","useremail@gmail.com","xxxxxx");
		entityUser = new User(userDTO.login(),userDTO.email(),userDTO.login(),RoleType.PATIENT);
		var patientCreationDTO = util.setUpMockPatientCreationDTO();
		var entityPatient = util.convertMockPatientDTOToMockEntity(patientCreationDTO);
		entityUser.setPerson(entityPatient);
		userDTO = new UserCreationDTO("mockUser","useremail@gmail.com","xxxxxx");
		when(userRepository.save(any(User.class)))
	    .thenReturn(entityUser);
		
		UserRecord userRecord = mock(UserRecord.class);
		when(userRecord.getUid()).thenReturn("mockUid");
		when(firebaseAuth.createUser(any(UserRecord.CreateRequest.class))).thenReturn(userRecord);
		
	}
	
	@Test
	void shouldRegisterUserPatientAndGiveDTOResponse() throws FirebaseAuthException {
		UserResponseDTO userPatient = userService.registerUserPatient(userDTO);
		assertEquals("mockUser", userPatient.login());
		assertEquals("useremail@gmail.com", userPatient.email());
		
	}
	
	
}
