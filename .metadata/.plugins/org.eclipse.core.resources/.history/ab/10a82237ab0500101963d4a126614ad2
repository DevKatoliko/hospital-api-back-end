package model.entities;

import java.time.LocalDate;


import org.hibernate.validator.constraints.br.CPF;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import model.enums.Gender;
@Inheritance(strategy = InheritanceType.JOINED)
@Entity
@Table(name= "Persons")
public abstract class Person {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@NotBlank(message = "O nome não pode estar em branco")
	@Size(min=2, max=32, message="O nome deve ter entre 2 a 32 caracteres")
	private String name;
	@NotBlank(message = "O sobrenome não pode estar em branco")
	@Size(min=2, max=32, message="O sobrenome deve ter entre 2 a 32 caracteres")
	private String lastName;
	@NotNull(message= "O gênero é obrigatório")
	@Enumerated(value= EnumType.STRING)
	private Gender gender;
	@CPF(message="Cpf inválido")
	private String cpf;
	@NotBlank(message="Data de nascimento não pode estar em branco!")
	@Past(message = "A data de nascimento deve ser no passado!")
	private LocalDate birthDate;
	@Pattern(regexp = "\\(\\d{2}\\d{4,5}-\\d{4})", message="Telefone inválido")
	private String telephoneNumber;
	@NotBlank(message= "O número de celular é obrigatório")
	@Pattern(regexp = "\\(\\d{2}\\d{4,5}-\\d{4})", message="Telefone inválido")
	private String cellphoneNumber;
	@NotBlank(message = "O E-mail é obrigatório")
	@Email(message = "Email inválido!")
	private String email;
	@OneToOne
	@JoinColumn(name= "address_id", referencedColumnName = "id", nullable = false)
	private Address address;
	@OneToOne
	@JoinColumn(name = "hospital_id", referencedColumnName = "id", nullable = false)
	private Hospital hospital;
	
	
	public Person(
			String name,String lastName,Gender gender,String cpf,LocalDate birthDate,String telephoneNumber,
			String cellphoneNumber,String email,	Address address, Hospital hospital) {
		this.name = name;
		this.lastName = lastName;
		this.gender = gender;
		this.cpf = cpf;
		this.birthDate = birthDate;
		this.telephoneNumber = telephoneNumber;
		this.cellphoneNumber = cellphoneNumber;
		this.email = email;
		this.address = address;
		this.hospital = hospital;
	}
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public Gender getGender() {
		return gender;
	}
	public void setGender(Gender gender) {
		this.gender = gender;
	}
	public String getCpf() {
		return cpf;
	}
	public void setSsn(String ssn) {
		this.cpf = ssn;
	}
	public LocalDate getBirthDate() {
		return birthDate;
	}
	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}
	public String getTelephoneNumber() {
		return telephoneNumber;
	}
	public void setTelephoneNumber(String telephoneNumber) {
		this.telephoneNumber = telephoneNumber;
	}
	public String getCellphoneNumber() {
		return cellphoneNumber;
	}
	public void setCellphoneNumber(String cellphoneNumber) {
		this.cellphoneNumber = cellphoneNumber;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public Address getAddress() {
		return address;
	}
	public void setAddress(Address address) {
		this.address = address;
	}
	public Hospital getHospitalId() {
		return hospital;
	}
	public void setHospitalId(Hospital hospital) {
		this.hospital = hospital;
	}
	
}
